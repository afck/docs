var searchIndex = {};
searchIndex['fann'] = {"items":[[0,"","fann","A Rust wrapper for the Fast Artificial Neural Network library.",null,null],[3,"FannError","","",null,null],[12,"error_type","","",0,null],[12,"error_str","","",0,null],[3,"CascadeParams","","Parameters for cascade training.",null,null],[12,"output_change_fraction","","A number between 0 and 1 determining how large a fraction the mean square error should\nchange within `output_stagnation_epochs` during training of the output connections, in\norder for the training to stagnate. After stagnation, training of the output connections\nends and new candidates are prepared.",1,null],[12,"output_stagnation_epochs","","The number of epochs training is allowed to continue without changing the MSE by a fraction\nof at least `output_change_fraction`.",1,null],[12,"candidate_change_fraction","","A number between 0 and 1 determining how large a fraction the mean square error should\nchange within `candidate_stagnation_epochs` during training of the candidate neurons, in\norder for the training to stagnate. After stagnation, training of the candidate neurons is\nstopped and the best candidate is selected.",1,null],[12,"candidate_stagnation_epochs","","The number of epochs training is allowed to continue without changing the MSE by a fraction\nof `candidate_change_fraction`.",1,null],[12,"candidate_limit","","A limit for how much the candidate neuron may be trained. It limits the ratio between the\nMSE and the candidate score.",1,null],[12,"weight_multiplier","","Multiplier for the weight of the candidate neuron before adding it to the network. Usually\nbetween 0 and 1, to make training less aggressive.",1,null],[12,"max_out_epochs","","The maximum number of epochs the output connections may be trained after adding a new\ncandidate neuron.",1,null],[12,"max_cand_epochs","","The maximum number of epochs the input connections to the candidates may be trained before\nadding a new candidate neuron.",1,null],[12,"activation_functions","","The activation functions for the candidate neurons.",1,null],[12,"activation_steepnesses","","The activation function steepness values for the candidate neurons.",1,null],[12,"num_candidate_groups","","The number of candidate neurons to be trained for each combination of activation function\nand steepness.",1,null],[3,"BatchParams","","",null,null],[12,"learning_rate","","The learning rate determines how aggressive training should be. Default is 0.7.",2,null],[3,"IncrementalParams","","",null,null],[12,"learning_momentum","","A higher momentum can be used to speed up incremental training. It should be between 0\nand 1, the default is 0.",3,null],[12,"learning_rate","","The learning rate determines how aggressive training should be. Default is 0.7.",3,null],[3,"QuickpropParams","","",null,null],[12,"decay","","The factor by which weights should become smaller in each iteration, to ensure that\nthe weights don't grow too large during training. Should be a negative number close to\n0. The default is -0.0001.",4,null],[12,"mu","","The mu factor is used to increase or decrease the step size; should always be greater\nthan 1. The default is 1.75.",4,null],[12,"learning_rate","","The learning rate determines how aggressive training should be. Default is 0.7.",4,null],[3,"RpropParams","","",null,null],[12,"decrease_factor","","A value less than 1, used to decrease the step size during training. Default 0.5",5,null],[12,"increase_factor","","A value greater than 1, used to increase the step size during training. Default 1.2",5,null],[12,"delta_min","","The minimum step size. Default 0.0",5,null],[12,"delta_max","","The maximum step size. Default 50.0",5,null],[12,"delta_zero","","The initial step size. Default 0.1",5,null],[3,"TrainData","","",null,null],[3,"FannTrainer","","A training configuration. Create this with `Fann::on_data` or `Fann::on_file` and run the\ntraining with `train`.",null,null],[3,"Fann","","",null,null],[4,"ActivationFunc","","The activation functions used for the neurons during training. They can either be set for a\ngroup of neurons using `set_activation_func_hidden` and `set_activation_func_output`, or for a\nsingle neuron using `set_activation_func`.",null,null],[13,"Linear","","Linear activation function.",6,null],[13,"Threshold","","Threshold activation function.",6,null],[13,"ThresholdSymmetric","","Threshold activation function.",6,null],[13,"Sigmoid","","Sigmoid activation function.",6,null],[13,"SigmoidStepwise","","Stepwise linear approximation to sigmoid.",6,null],[13,"SigmoidSymmetric","","Symmetric sigmoid activation function, aka. tanh.",6,null],[13,"SigmoidSymmetricStepwise","","Stepwise linear approximation to symmetric sigmoid.",6,null],[13,"Gaussian","","Gaussian activation function.",6,null],[13,"GaussianSymmetric","","Symmetric gaussian activation function.",6,null],[13,"GaussianStepwise","","Stepwise linear approximation to gaussian.\nFaster than gaussian but a bit less precise.\nNOT implemented yet.",6,null],[13,"Elliott","","Fast (sigmoid like) activation function defined by David Elliott",6,null],[13,"ElliottSymmetric","","Fast (symmetric sigmoid like) activation function defined by David Elliott",6,null],[13,"LinearPiece","","Bounded linear activation function.",6,null],[13,"LinearPieceSymmetric","","Bounded linear activation function.",6,null],[13,"SinSymmetric","","Periodical sine activation function.",6,null],[13,"CosSymmetric","","Periodical cosine activation function.",6,null],[13,"Sin","","Periodical sine activation function.",6,null],[13,"Cos","","Periodical cosine activation function.",6,null],[4,"FannErrorType","","",null,null],[13,"CantOpenConfigR","","Unable to open configuration file for reading",7,null],[13,"CantOpenConfigW","","Unable to open configuration file for writing",7,null],[13,"WrongConfigVersion","","Wrong version of configuration file",7,null],[13,"CantReadConfig","","Error reading info from configuration file",7,null],[13,"CantReadNeuron","","Error reading neuron info from configuration file",7,null],[13,"CantReadConnections","","Error reading connections from configuration file",7,null],[13,"WrongNumConnections","","Number of connections not equal to the number expected",7,null],[13,"CantOpenTdW","","Unable to open train data file for writing",7,null],[13,"CantOpenTdR","","Unable to open train data file for reading",7,null],[13,"CantReadTd","","Error reading training data from file",7,null],[13,"CantAllocateMem","","Unable to allocate memory",7,null],[13,"CantTrainActivation","","Unable to train with the selected activation function",7,null],[13,"CantUseActivation","","Unable to use the selected activation function",7,null],[13,"TrainDataMismatch","","Irreconcilable differences between two `fann_train_data` structures",7,null],[13,"CantUseTrainAlg","","Unable to use the selected training algorithm",7,null],[13,"TrainDataSubset","","Trying to take subset which is not within the training set",7,null],[13,"IndexOutOfBound","","Index is out of bound",7,null],[13,"ScaleNotPresent","","Scaling parameters not present",7,null],[13,"CantSaveFile","","Failed to save file",7,null],[13,"ErrorCodeReturned","","C function returned an error code, i. e. not 0, but did not specify error",7,null],[4,"ErrorFunc","","Error function used during training.",null,null],[13,"Linear","","Standard linear error function",8,null],[13,"Tanh","","Tanh error function; usually better but may require a lower learning rate. This error\nfunction aggressively targets outputs that differ much from the desired, while not targeting\noutputs that only differ slightly. Not recommended for cascade or incremental training.",8,null],[4,"NetType","","Network types",null,null],[13,"Layer","","Each layer of neurons only has connections to the next layer.",9,null],[13,"Shortcut","","Each layer has connections to all following layers.",9,null],[4,"StopFunc","","Stop critieria for training.",null,null],[13,"Mse","","The mean square error of the whole output.",10,null],[13,"Bit","","The number of training data points where the output neuron's error was greater than the bit\nfail limit. Every neuron is counted for every training data sample where it fails.",10,null],[4,"TrainAlgorithm","","The Training algorithms used when training on `fann_train_data` with functions like\n`fann_train_on_data` or `fann_train_on_file`. The incremental training alters the weights\nafter each time it is presented an input pattern, while batch only alters the weights once after\nit has been presented to all the patterns.",null,null],[13,"Incremental","","Standard backpropagation algorithm, where the weights are updated after each training\npattern. This means that the weights are updated many times during a single epoch and some\nproblems will train very fast, while other more advanced problems will not train very well.",11,null],[13,"Batch","","Standard backpropagation algorithm, where the weights are updated after calculating the mean\nsquare error for the whole training set. This means that the weights are only updated once\nduring an epoch. For this reason some problems will train slower with this algorithm. But\nsince the mean square error is calculated more correctly than in incremental training, some\nproblems will reach better solutions.",11,null],[13,"Rprop","","A more advanced batch training algorithm which achieves good results for many problems.\n`Rprop` is adaptive and therefore does not use the `learning_rate`. Some other parameters\ncan, however, be set to change the way `Rprop` works, but it is only recommended for users\nwith a deep understanding of the algorithm. The original RPROP training algorithm is\ndescribed by [Riedmiller and Braun, 1993], but the algorithm used here is a variant, iRPROP,\ndescribed by [Igel and Husken, 2000].",11,null],[13,"Quickprop","","A more advanced batch training algorithm which achieves good results for many problems. The\nquickprop training algorithm uses the `learning_rate` parameter along with other more\nadvanced parameters, but it is only recommended to change these for users with a deep\nunderstanding of the algorithm. Quickprop is described by [Fahlman, 1988].",11,null],[4,"CallbackResult","","",null,null],[13,"Stop","","",12,null],[13,"Continue","","",12,null],[11,"eq","","",6,{"inputs":[{"name":"activationfunc"},{"name":"activationfunc"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"activationfunc"},{"name":"activationfunc"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"activationfunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"activationfunc"}],"output":{"name":"activationfunc"}}],[11,"from_fann_activationfunc_enum","","Create an `ActivationFunc` from a `fann_sys::fann_activationfunc_enum`.",6,{"inputs":[{"name":"activationfunc"},{"name":"fann_activationfunc_enum"}],"output":{"name":"fannresult"}}],[11,"to_fann_activationfunc_enum","","Return the `fann_sys::fann_activationfunc_enum` corresponding to this `ActivationFunc`.",6,{"inputs":[{"name":"activationfunc"}],"output":{"name":"fann_activationfunc_enum"}}],[11,"eq","","",7,{"inputs":[{"name":"fannerrortype"},{"name":"fannerrortype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"fannerrortype"},{"name":"fannerrortype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"fannerrortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"fannerrortype"}],"output":{"name":"fannerrortype"}}],[11,"fmt","","",7,{"inputs":[{"name":"fannerrortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"fannerror"},{"name":"fannerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"fannerror"},{"name":"fannerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"fannerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"fannerror"}],"output":{"name":"fannerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"fannerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"fannerror"}],"output":{"name":"str"}}],[11,"check_no_error","","Returns an `Err` if the previous operation on `errdat` has resulted in an error, otherwise\n`Ok(())`.",0,null],[11,"check_zero","","",0,null],[11,"eq","","",8,{"inputs":[{"name":"errorfunc"},{"name":"errorfunc"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"errorfunc"},{"name":"errorfunc"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"errorfunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"errorfunc"}],"output":{"name":"errorfunc"}}],[11,"from_errorfunc_enum","","Create an `ErrorFunc` from a `fann_sys::fann_errorfunc_enum`.",8,{"inputs":[{"name":"errorfunc"},{"name":"fann_errorfunc_enum"}],"output":{"name":"errorfunc"}}],[11,"to_errorfunc_enum","","Return the `fann_sys::fann_errorfunc_enum` corresponding to this `ErrorFunc`.",8,{"inputs":[{"name":"errorfunc"}],"output":{"name":"fann_errorfunc_enum"}}],[11,"eq","","",1,{"inputs":[{"name":"cascadeparams"},{"name":"cascadeparams"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"cascadeparams"},{"name":"cascadeparams"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"cascadeparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"cascadeparams"}],"output":{"name":"cascadeparams"}}],[11,"get_num_candidates","","The number of candidates used during training: the number of combinations of activation\nfunctions and steepnesses, times `num_candidate_groups`.",1,{"inputs":[{"name":"cascadeparams"}],"output":{"name":"c_uint"}}],[11,"default","","",1,{"inputs":[{"name":"cascadeparams"}],"output":{"name":"cascadeparams"}}],[11,"eq","","",9,{"inputs":[{"name":"nettype"},{"name":"nettype"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"nettype"},{"name":"nettype"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"nettype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"nettype"}],"output":{"name":"nettype"}}],[11,"from_nettype_enum","","Create a `NetType` from a `fann_sys::fann_nettype_enum`.",9,{"inputs":[{"name":"nettype"},{"name":"fann_nettype_enum"}],"output":{"name":"nettype"}}],[11,"eq","","",10,{"inputs":[{"name":"stopfunc"},{"name":"stopfunc"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"stopfunc"},{"name":"stopfunc"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"stopfunc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"stopfunc"}],"output":{"name":"stopfunc"}}],[11,"from_stopfunc_enum","","Create a `StopFunc` from a `fann_sys::fann_stopfunc_enum`.",10,{"inputs":[{"name":"stopfunc"},{"name":"fann_stopfunc_enum"}],"output":{"name":"stopfunc"}}],[11,"to_stopfunc_enum","","Return the `fann_sys::fann_stopfunc_enum` corresponding to this `StopFunc`.",10,{"inputs":[{"name":"stopfunc"}],"output":{"name":"fann_stopfunc_enum"}}],[11,"eq","","",3,{"inputs":[{"name":"incrementalparams"},{"name":"incrementalparams"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"incrementalparams"},{"name":"incrementalparams"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"incrementalparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"incrementalparams"}],"output":{"name":"incrementalparams"}}],[11,"default","","",3,{"inputs":[{"name":"incrementalparams"}],"output":{"name":"incrementalparams"}}],[11,"eq","","",2,{"inputs":[{"name":"batchparams"},{"name":"batchparams"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"batchparams"},{"name":"batchparams"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"batchparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"batchparams"}],"output":{"name":"batchparams"}}],[11,"default","","",2,{"inputs":[{"name":"batchparams"}],"output":{"name":"batchparams"}}],[11,"eq","","",5,{"inputs":[{"name":"rpropparams"},{"name":"rpropparams"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"rpropparams"},{"name":"rpropparams"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"rpropparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"rpropparams"}],"output":{"name":"rpropparams"}}],[11,"default","","",5,{"inputs":[{"name":"rpropparams"}],"output":{"name":"rpropparams"}}],[11,"eq","","",4,{"inputs":[{"name":"quickpropparams"},{"name":"quickpropparams"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"quickpropparams"},{"name":"quickpropparams"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"quickpropparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"quickpropparams"}],"output":{"name":"quickpropparams"}}],[11,"default","","",4,{"inputs":[{"name":"quickpropparams"}],"output":{"name":"quickpropparams"}}],[11,"eq","","",11,{"inputs":[{"name":"trainalgorithm"},{"name":"trainalgorithm"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"trainalgorithm"},{"name":"trainalgorithm"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"trainalgorithm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"trainalgorithm"}],"output":{"name":"trainalgorithm"}}],[11,"default","","",11,{"inputs":[{"name":"trainalgorithm"}],"output":{"name":"trainalgorithm"}}],[11,"from_file","","Read a file that stores training data.",13,{"inputs":[{"name":"traindata"},{"name":"p"}],"output":{"name":"fannresult"}}],[11,"from_callback","","Create training data using the given callback which for each number between `0` (included)\nand `num_data` (excluded) returns a pair of input and output vectors with `num_input` and\n`num_output` entries respectively.",13,{"inputs":[{"name":"traindata"},{"name":"c_uint"},{"name":"c_uint"},{"name":"c_uint"},{"name":"box"}],"output":{"name":"fannresult"}}],[11,"save","","Save the training data to a file.",13,{"inputs":[{"name":"traindata"},{"name":"p"}],"output":{"name":"fannresult"}}],[11,"merge","","Merge the given data sets into a new one.",13,{"inputs":[{"name":"traindata"},{"name":"traindata"},{"name":"traindata"}],"output":{"name":"fannresult"}}],[11,"subset","","Create a subset of the training data, starting at the given positon and consisting of\n`length` samples.",13,{"inputs":[{"name":"traindata"},{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"fannresult"}}],[11,"length","","Return the number of training patterns in the data.",13,{"inputs":[{"name":"traindata"}],"output":{"name":"c_uint"}}],[11,"num_input","","Return the number of input values in each training pattern.",13,{"inputs":[{"name":"traindata"}],"output":{"name":"c_uint"}}],[11,"num_output","","Return the number of output values in each training pattern.",13,{"inputs":[{"name":"traindata"}],"output":{"name":"c_uint"}}],[11,"scale_for","","Scale input and output in the training data using the parameters previously calculated for\nthe given network.",13,{"inputs":[{"name":"traindata"},{"name":"fann"}],"output":{"name":"fannresult"}}],[11,"descale_for","","Descale input and output in the training data using the parameters previously calculated for\nthe given network.",13,{"inputs":[{"name":"traindata"},{"name":"fann"}],"output":{"name":"fannresult"}}],[11,"scale_input","","Scales the inputs in the training data to the specified range.",13,{"inputs":[{"name":"traindata"},{"name":"fann_type"},{"name":"fann_type"}],"output":{"name":"fannresult"}}],[11,"scale_output","","Scales the outputs in the training data to the specified range.",13,{"inputs":[{"name":"traindata"},{"name":"fann_type"},{"name":"fann_type"}],"output":{"name":"fannresult"}}],[11,"scale","","Scales the inputs and outputs in the training data to the specified range.",13,{"inputs":[{"name":"traindata"},{"name":"fann_type"},{"name":"fann_type"}],"output":{"name":"fannresult"}}],[11,"shuffle","","Shuffle training data, randomizing the order. This is recommended for incremental training\nwhile it does not affect batch training.",13,{"inputs":[{"name":"traindata"}],"output":null}],[11,"get_raw","","Get a pointer to the underlying raw `fann_train_data` structure.",13,null],[11,"clone","","",13,{"inputs":[{"name":"traindata"}],"output":{"name":"traindata"}}],[11,"drop","","",13,{"inputs":[{"name":"traindata"}],"output":null}],[6,"FannResult","","",null,null],[6,"FannType","","The type of weights, inputs and outputs in a neural network. It is defined as `c_float` by\ndefault, and as `c_double` if the `double` feature is configured.",null,null],[6,"Connection","","",null,null],[11,"fmt","","",12,{"inputs":[{"name":"callbackresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"callbackresult"}],"output":{"name":"callbackresult"}}],[11,"stop_if","","",12,{"inputs":[{"name":"callbackresult"},{"name":"bool"}],"output":{"name":"callbackresult"}}],[11,"with_reports","","Activates printing reports periodically. Between two reports, `interval` neurons are added\n(for cascade training) or training goes on for `interval` epochs (otherwise).",14,{"inputs":[{"name":"fanntrainer"},{"name":"c_uint"}],"output":{"name":"fanntrainer"}}],[11,"with_callback","","Configures a callback to be called periodically during training. Every `interval` epochs\n(for regular training) or every time `interval` new neurons have been added (for cascade\ntraining), the callback runs. It receives as arguments:",14,{"inputs":[{"name":"fanntrainer"},{"name":"c_uint"},{"name":"fn"}],"output":{"name":"fanntrainer"}}],[11,"cascade","","Use the Cascade2 algorithm: This adds neurons to the neural network while training, starting\nwith an ANN without any hidden layers. The network should use shortcut connections, so it\nneeds to be created like this:",14,{"inputs":[{"name":"fanntrainer"}],"output":{"name":"fanntrainer"}}],[11,"train","","Train the network until either the mean square error drops below the `desired_error`, or\nthe maximum number of steps is reached. If cascade training is activated, `max_steps`\nrefers to the number of neurons that are added, otherwise it is the maximum number of\ntraining epochs.",14,{"inputs":[{"name":"fanntrainer"},{"name":"c_uint"},{"name":"c_float"}],"output":{"name":"fannresult"}}],[11,"new","","Create a fully connected neural network.",15,null],[11,"new_sparse","","Create a neural network that is not necessarily fully connected.",15,null],[11,"new_shortcut","","Create a neural network which has shortcut connections, i. e. it doesn't connect only each\nlayer to its successor, but every layer with every later layer: Each neuron has connections\nto all neurons in all subsequent layers.",15,null],[11,"from_file","","Read a neural network from a file.",15,{"inputs":[{"name":"fann"},{"name":"p"}],"output":{"name":"fannresult"}}],[11,"save","","Save the network to a configuration file.",15,{"inputs":[{"name":"fann"},{"name":"p"}],"output":{"name":"fannresult"}}],[11,"randomize_weights","","Give each connection a random weight between `min_weight` and `max_weight`.",15,{"inputs":[{"name":"fann"},{"name":"fanntype"},{"name":"fanntype"}],"output":null}],[11,"init_weights","","Initialize the weights using Widrow & Nguyen's algorithm.",15,{"inputs":[{"name":"fann"},{"name":"traindata"}],"output":null}],[11,"print_connections","","Print the connections of the network in a compact matrix, for easy viewing of its\ninternals.",15,{"inputs":[{"name":"fann"}],"output":null}],[11,"print_parameters","","Print all parameters and options of the network.",15,{"inputs":[{"name":"fann"}],"output":null}],[11,"train","","Train with a single pair of input and output. This is always incremental training (see\n`TrainAlg`), since only one pattern is presented.",15,null],[11,"on_data","","Create a training configuration for the given data set.",15,{"inputs":[{"name":"fann"},{"name":"traindata"}],"output":{"name":"fanntrainer"}}],[11,"on_file","","Create a training configuration, reading the training data from the given file.",15,{"inputs":[{"name":"fann"},{"name":"p"}],"output":{"name":"fanntrainer"}}],[11,"train_epoch","","Train one epoch with a set of training data, i. e. each sample from the training data is\nconsidered exactly once.",15,{"inputs":[{"name":"fann"},{"name":"traindata"}],"output":{"name":"fannresult"}}],[11,"test","","Test with a single pair of input and output. This operation updates the mean square error\nbut does not change the network.",15,null],[11,"test_data","","Test with a training data set and calculate the mean square error.",15,{"inputs":[{"name":"fann"},{"name":"traindata"}],"output":{"name":"fannresult"}}],[11,"get_mse","","Get the mean square error.",15,{"inputs":[{"name":"fann"}],"output":{"name":"c_float"}}],[11,"get_bit_fail","","Get the number of fail bits, i. e. the number of neurons which differed from the desired\noutput by more than the bit fail limit since the previous reset.",15,{"inputs":[{"name":"fann"}],"output":{"name":"c_uint"}}],[11,"reset_mse_and_bit_fail","","Reset the mean square error and bit fail count.",15,{"inputs":[{"name":"fann"}],"output":null}],[11,"run","","Run the input through the neural network and returns the output. The length of the input\nmust equal the number of input neurons and the length of the output will equal the number\nof output neurons.",15,null],[11,"get_num_input","","Get the number of input neurons.",15,{"inputs":[{"name":"fann"}],"output":{"name":"c_uint"}}],[11,"get_num_output","","Get the number of output neurons.",15,{"inputs":[{"name":"fann"}],"output":{"name":"c_uint"}}],[11,"get_total_neurons","","Get the total number of neurons, including the bias neurons.",15,{"inputs":[{"name":"fann"}],"output":{"name":"c_uint"}}],[11,"get_total_connections","","Get the total number of connections.",15,{"inputs":[{"name":"fann"}],"output":{"name":"c_uint"}}],[11,"get_network_type","","Get the type of the neural network.",15,{"inputs":[{"name":"fann"}],"output":{"name":"nettype"}}],[11,"get_connection_rate","","Get the connection rate used when the network was created.",15,{"inputs":[{"name":"fann"}],"output":{"name":"c_float"}}],[11,"get_num_layers","","Get the number of layers in the network.",15,{"inputs":[{"name":"fann"}],"output":{"name":"c_uint"}}],[11,"get_layer_sizes","","Get the number of neurons in each layer of the network.",15,{"inputs":[{"name":"fann"}],"output":{"name":"vec"}}],[11,"get_bias_counts","","Get the number of bias neurons in each layer of the network.",15,{"inputs":[{"name":"fann"}],"output":{"name":"vec"}}],[11,"get_connections","","Get a list of all connections in the network.",15,{"inputs":[{"name":"fann"}],"output":{"name":"vec"}}],[11,"set_connections","","Set the weights of all given connections.",15,{"inputs":[{"name":"fann"},{"name":"i"}],"output":null}],[11,"set_weight","","Set the weight of the given connection.",15,{"inputs":[{"name":"fann"},{"name":"c_uint"},{"name":"c_uint"},{"name":"fanntype"}],"output":null}],[11,"get_activation_func","","Get the activation function for neuron number `neuron` in layer number `layer`, counting\nthe input layer as number 0. Input layer neurons do not have an activation function, so\n`layer` must be at least 1.",15,{"inputs":[{"name":"fann"},{"name":"c_int"},{"name":"c_int"}],"output":{"name":"fannresult"}}],[11,"set_activation_func","","Set the activation function for neuron number `neuron` in layer number `layer`, counting\nthe input layer as number 0. Input layer neurons do not have an activation function, so\n`layer` must be at least 1.",15,{"inputs":[{"name":"fann"},{"name":"activationfunc"},{"name":"c_int"},{"name":"c_int"}],"output":null}],[11,"set_activation_func_hidden","","Set the activation function for all hidden layers.",15,{"inputs":[{"name":"fann"},{"name":"activationfunc"}],"output":null}],[11,"set_activation_func_output","","Set the activation function for the output layer.",15,{"inputs":[{"name":"fann"},{"name":"activationfunc"}],"output":null}],[11,"get_activation_steepness","","Get the activation steepness for neuron number `neuron` in layer number `layer`.",15,{"inputs":[{"name":"fann"},{"name":"c_int"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"set_activation_steepness","","Set the activation steepness for neuron number `neuron` in layer number `layer`, counting\nthe input layer as number 0. Input layer neurons do not have an activation steepness, so\nlayer must be at least 1.",15,{"inputs":[{"name":"fann"},{"name":"fanntype"},{"name":"c_int"},{"name":"c_int"}],"output":null}],[11,"set_activation_steepness_layer","","Set the activation steepness for layer number `layer`.",15,{"inputs":[{"name":"fann"},{"name":"fanntype"},{"name":"c_int"}],"output":null}],[11,"set_activation_steepness_hidden","","Set the activation steepness for all hidden layers.",15,{"inputs":[{"name":"fann"},{"name":"fanntype"}],"output":null}],[11,"set_activation_steepness_output","","Set the activation steepness for the output layer.",15,{"inputs":[{"name":"fann"},{"name":"fanntype"}],"output":null}],[11,"get_error_func","","Get the error function used during training.",15,{"inputs":[{"name":"fann"}],"output":{"name":"errorfunc"}}],[11,"set_error_func","","Set the error function used during training.",15,{"inputs":[{"name":"fann"},{"name":"errorfunc"}],"output":null}],[11,"get_stop_func","","Get the stop criterion for training.",15,{"inputs":[{"name":"fann"}],"output":{"name":"stopfunc"}}],[11,"set_stop_func","","Set the stop criterion for training.",15,{"inputs":[{"name":"fann"},{"name":"stopfunc"}],"output":null}],[11,"get_bit_fail_limit","","Get the bit fail limit.",15,{"inputs":[{"name":"fann"}],"output":{"name":"fanntype"}}],[11,"set_bit_fail_limit","","Set the bit fail limit.",15,{"inputs":[{"name":"fann"},{"name":"fanntype"}],"output":null}],[11,"get_cascade_params","","Get cascade training parameters.",15,{"inputs":[{"name":"fann"}],"output":{"name":"cascadeparams"}}],[11,"set_cascade_params","","Set cascade training parameters.",15,{"inputs":[{"name":"fann"},{"name":"cascadeparams"}],"output":null}],[11,"get_train_algorithm","","Get the currently configured training algorithm.",15,{"inputs":[{"name":"fann"}],"output":{"name":"trainalgorithm"}}],[11,"set_train_algorithm","","Set the algorithm to be used for training.",15,{"inputs":[{"name":"fann"},{"name":"trainalgorithm"}],"output":null}],[11,"set_input_scaling_params","","Calculate input scaling parameters for future use based on the given training data.",15,{"inputs":[{"name":"fann"},{"name":"traindata"},{"name":"c_float"},{"name":"c_float"}],"output":{"name":"fannresult"}}],[11,"set_output_scaling_params","","Calculate output scaling parameters for future use based on the given training data.",15,{"inputs":[{"name":"fann"},{"name":"traindata"},{"name":"c_float"},{"name":"c_float"}],"output":{"name":"fannresult"}}],[11,"set_scaling_params","","Calculate scaling parameters for future use based on the given training data.",15,{"inputs":[{"name":"fann"},{"name":"traindata"},{"name":"c_float"},{"name":"c_float"},{"name":"c_float"},{"name":"c_float"}],"output":{"name":"fannresult"}}],[11,"clear_scaling_params","","Clear scaling parameters.",15,{"inputs":[{"name":"fann"}],"output":{"name":"fannresult"}}],[11,"scale_input","","Scale data in input vector before feeding it to the network, based on previously calculated\nparameters.",15,null],[11,"scale_output","","Scale data in output vector before feeding it to the network, based on previously calculated\nparameters.",15,null],[11,"descale_input","","Descale data in input vector after feeding it to the network, based on previously calculated\nparameters.",15,null],[11,"descale_output","","Descale data in output vector after getting it from the network, based on previously\ncalculated parameters.",15,null],[11,"drop","","",15,{"inputs":[{"name":"fann"}],"output":null}]],"paths":[[3,"FannError"],[3,"CascadeParams"],[3,"BatchParams"],[3,"IncrementalParams"],[3,"QuickpropParams"],[3,"RpropParams"],[4,"ActivationFunc"],[4,"FannErrorType"],[4,"ErrorFunc"],[4,"NetType"],[4,"StopFunc"],[4,"TrainAlgorithm"],[4,"CallbackResult"],[3,"TrainData"],[3,"FannTrainer"],[3,"Fann"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Crate docs",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",9,null],[12,"dli_fbase","","",9,null],[12,"dli_sname","","",9,null],[12,"dli_saddr","","",9,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",10,null],[12,"sa_data","","",10,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",11,null],[12,"sin_port","","",11,null],[12,"sin_addr","","",11,null],[12,"sin_zero","","",11,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",12,null],[12,"sin6_port","","",12,null],[12,"sin6_flowinfo","","",12,null],[12,"sin6_addr","","",12,null],[12,"sin6_scope_id","","",12,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",13,null],[12,"sun_path","","",13,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",14,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",15,null],[12,"ai_family","","",15,null],[12,"ai_socktype","","",15,null],[12,"ai_protocol","","",15,null],[12,"ai_addrlen","","",15,null],[12,"ai_addr","","",15,null],[12,"ai_canonname","","",15,null],[12,"ai_next","","",15,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",16,null],[12,"sll_protocol","","",16,null],[12,"sll_ifindex","","",16,null],[12,"sll_hatype","","",16,null],[12,"sll_pkttype","","",16,null],[12,"sll_halen","","",16,null],[12,"sll_addr","","",16,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",17,null],[12,"tm_min","","",17,null],[12,"tm_hour","","",17,null],[12,"tm_mday","","",17,null],[12,"tm_mon","","",17,null],[12,"tm_year","","",17,null],[12,"tm_wday","","",17,null],[12,"tm_yday","","",17,null],[12,"tm_isdst","","",17,null],[12,"tm_gmtoff","","",17,null],[12,"tm_zone","","",17,null],[3,"dirent","","",null,null],[12,"d_ino","","",18,null],[12,"d_off","","",18,null],[12,"d_reclen","","",18,null],[12,"d_type","","",18,null],[12,"d_name","","",18,null],[3,"dirent64","","",null,null],[12,"d_ino","","",19,null],[12,"d_off","","",19,null],[12,"d_reclen","","",19,null],[12,"d_type","","",19,null],[12,"d_name","","",19,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",20,null],[12,"rlim_max","","",20,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",21,null],[12,"gl_pathv","","",21,null],[12,"gl_offs","","",21,null],[12,"gl_flags","","",21,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",22,null],[12,"ifa_name","","",22,null],[12,"ifa_flags","","",22,null],[12,"ifa_addr","","",22,null],[12,"ifa_netmask","","",22,null],[12,"ifa_ifu","","",22,null],[12,"ifa_data","","",22,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",24,null],[12,"gl_pathv","","",24,null],[12,"gl_offs","","",24,null],[12,"gl_flags","","",24,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",25,null],[12,"sa_mask","","",25,null],[12,"sa_flags","","",25,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",26,null],[12,"ss_flags","","",26,null],[12,"ss_size","","",26,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",27,null],[12,"si_errno","","",27,null],[12,"si_code","","",27,null],[12,"_pad","","",27,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",28,null],[12,"st_ino","","",28,null],[12,"st_nlink","","",28,null],[12,"st_mode","","",28,null],[12,"st_uid","","",28,null],[12,"st_gid","","",28,null],[12,"st_rdev","","",28,null],[12,"st_size","","",28,null],[12,"st_blksize","","",28,null],[12,"st_blocks","","",28,null],[12,"st_atime","","",28,null],[12,"st_atime_nsec","","",28,null],[12,"st_mtime","","",28,null],[12,"st_mtime_nsec","","",28,null],[12,"st_ctime","","",28,null],[12,"st_ctime_nsec","","",28,null],[3,"stat64","","",null,null],[12,"st_dev","","",29,null],[12,"st_ino","","",29,null],[12,"st_nlink","","",29,null],[12,"st_mode","","",29,null],[12,"st_uid","","",29,null],[12,"st_gid","","",29,null],[12,"st_rdev","","",29,null],[12,"st_size","","",29,null],[12,"st_blksize","","",29,null],[12,"st_blocks","","",29,null],[12,"st_atime","","",29,null],[12,"st_atime_nsec","","",29,null],[12,"st_mtime","","",29,null],[12,"st_mtime_nsec","","",29,null],[12,"st_ctime","","",29,null],[12,"st_ctime_nsec","","",29,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"putenv","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"usleep","","",null,null],[5,"recvfrom","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"mkfifo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"posix_memalign","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"shm_open","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",30,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",30,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",30,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",30,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",30,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",30,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",30,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",30,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",30,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",30,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",30,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",30,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",30,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",31,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",32,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",33,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",34,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",34,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",34,null],[11,"clone","","",35,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",35,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",35,null],[11,"fmt","","",36,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",37,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",37,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",38,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",39,null],[11,"eq","","",40,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",41,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",41,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",42,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",43,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",43,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",43,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",43,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",43,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",43,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",43,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",43,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",43,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",43,null],[11,"eq","","",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",43,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",43,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",44,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",44,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",44,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",44,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",44,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",44,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",44,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",44,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",44,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",44,null],[11,"eq","","",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",44,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",44,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",45,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",45,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",45,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",45,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",46,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",47,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",47,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",48,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",49,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",49,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",50,null],[11,"get","","Dereferences the content.",50,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",50,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",51,null],[11,"clone","","",51,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",52,null],[11,"eq","","",52,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",52,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",52,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",52,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",53,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",53,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",54,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",55,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",56,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",57,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",57,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",57,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",58,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",58,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",58,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",58,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",58,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",58,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",58,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",59,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",60,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",61,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",62,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",63,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",64,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",60,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",60,null],[11,"swap","","Stores a value into the bool, returning the old value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",61,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",61,null],[11,"swap","","Stores a value into the isize, returning the old value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",62,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",62,null],[11,"swap","","Stores a value into the usize, returning the old value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",63,null],[11,"load","","Loads a value from the pointer.",63,null],[11,"store","","Stores a value into the pointer.",63,null],[11,"swap","","Stores a value into the pointer, returning the old value.",63,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",63,null],[11,"fmt","","",62,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",65,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",65,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",65,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",65,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",65,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",65,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",65,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",67,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",67,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",67,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",67,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",67,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",67,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",67,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",67,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",67,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",68,null],[11,"clone","","",68,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",69,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",69,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",69,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",69,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",70,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",70,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",71,null],[11,"deref","","",70,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",70,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",72,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",72,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",72,null],[11,"clone","core::char","",73,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",74,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",73,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","","",75,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",76,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",75,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","core::iter","",77,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",77,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",78,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",79,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"clone","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",81,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",80,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",82,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",82,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",83,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",84,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",85,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",86,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"nth","","",86,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",86,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",86,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",87,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",87,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",87,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",87,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",87,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",87,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",88,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"clone","","",89,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",89,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",90,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",90,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",90,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",90,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"clone","","",91,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",91,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",91,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"clone","","",92,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",92,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"clone","","",93,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",93,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",94,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",95,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",55,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",54,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",96,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",97,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",97,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next","core::ops","",54,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",55,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",98,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",98,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",100,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",100,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",100,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",30,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",101,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",101,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",102,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",103,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",104,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",30,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",105,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",106,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",107,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",107,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",107,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",107,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",107,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",107,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",107,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",107,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",107,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",107,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",107,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",107,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",107,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",107,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",107,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",107,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",107,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",107,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",107,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",107,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",109,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",110,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",107,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",111,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",112,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",113,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",114,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",115,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",116,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",117,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",118,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",119,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",120,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",119,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",120,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",119,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",120,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",119,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",120,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",119,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",120,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",121,null],[11,"next","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"count","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",121,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",122,null],[11,"next","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"count","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",122,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",123,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",123,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",124,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",125,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next","","",126,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next","","",127,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next","","",128,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next","","",129,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"clone","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"count","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",130,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"count","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",131,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",132,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"count","","",132,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",132,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",132,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",133,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",134,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",135,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",134,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",134,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",134,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",140,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",141,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",142,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",143,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",143,null],[11,"matching","","",143,null],[11,"use_early_reject","","",144,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",144,null],[11,"matching","","",144,null],[11,"eq","core::str","",145,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",145,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",146,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",146,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",146,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",147,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next_back","","",147,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",147,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",148,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",148,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",148,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"count","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",149,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",150,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",151,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",152,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",151,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",153,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",154,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",153,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",155,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",156,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",157,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",158,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",159,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",160,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",159,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",160,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",162,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",163,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",162,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",163,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",164,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next_back","","",164,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",166,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",166,null],[11,"call_mut","","",166,null],[11,"call_once","","",166,null],[11,"next","","",165,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",165,null],[11,"next_back","","",165,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",168,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",168,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",168,null],[11,"finish","","",168,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",168,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",168,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",169,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",170,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",171,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",172,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",173,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",174,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",175,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",176,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",177,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",177,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",178,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",178,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",178,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",179,null],[11,"entry","","Adds a new entry to the set output.",180,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",180,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",180,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",181,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",181,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",181,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",182,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",182,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",182,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",183,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",184,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",185,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",186,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",187,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",188,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",189,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",190,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",191,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",191,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",192,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",192,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",192,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",192,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",192,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",192,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",192,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",192,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",192,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",52,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",65,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",193,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",193,null],[11,"clone","libc","",24,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",28,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",29,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",194,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",195,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",25,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",26,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",27,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",18,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",19,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",20,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",21,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",22,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",196,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",197,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",198,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",199,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",23,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",11,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",15,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",200,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",17,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"WNOHANG","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"Dl_info"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"glob64_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"stat"],[3,"stat64"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fd_set"]]};
searchIndex['fann_sys'] = {"items":[[0,"","fann_sys","Raw bindings to C functions of the Fast Artificial Neural Network library",null,null],[3,"fann_error","","Structure used to store error-related information, both\n`fann` and `fann_train_data` can be cast to this type.",null,null],[3,"fann","","The fast artificial neural network (`fann`) structure.",null,null],[3,"fann_connection","","Describes a connection between two neurons and its weight.",null,null],[12,"from_neuron","","Unique number used to identify source neuron",0,null],[12,"to_neuron","","Unique number used to identify destination neuron",0,null],[12,"weight","","The numerical value of the weight",0,null],[3,"fann_train_data","","Structure used to store data, for use with training.",null,null],[4,"fann_errno_enum","","Error events on fann and fann_train_data.",null,null],[13,"FANN_E_NO_ERROR","","No error",1,null],[13,"FANN_E_CANT_OPEN_CONFIG_R","","Unable to open configuration file for reading",1,null],[13,"FANN_E_CANT_OPEN_CONFIG_W","","Unable to open configuration file for writing",1,null],[13,"FANN_E_WRONG_CONFIG_VERSION","","Wrong version of configuration file",1,null],[13,"FANN_E_CANT_READ_CONFIG","","Error reading info from configuration file",1,null],[13,"FANN_E_CANT_READ_NEURON","","Error reading neuron info from configuration file",1,null],[13,"FANN_E_CANT_READ_CONNECTIONS","","Error reading connections from configuration file",1,null],[13,"FANN_E_WRONG_NUM_CONNECTIONS","","Number of connections not equal to the number expected",1,null],[13,"FANN_E_CANT_OPEN_TD_W","","Unable to open train data file for writing",1,null],[13,"FANN_E_CANT_OPEN_TD_R","","Unable to open train data file for reading",1,null],[13,"FANN_E_CANT_READ_TD","","Error reading training data from file",1,null],[13,"FANN_E_CANT_ALLOCATE_MEM","","Unable to allocate memory",1,null],[13,"FANN_E_CANT_TRAIN_ACTIVATION","","Unable to train with the selected activation function",1,null],[13,"FANN_E_CANT_USE_ACTIVATION","","Unable to use the selected activation function",1,null],[13,"FANN_E_TRAIN_DATA_MISMATCH","","Irreconcilable differences between two `fann_train_data` structures",1,null],[13,"FANN_E_CANT_USE_TRAIN_ALG","","Unable to use the selected training algorithm",1,null],[13,"FANN_E_TRAIN_DATA_SUBSET","","Trying to take subset which is not within the training set",1,null],[13,"FANN_E_INDEX_OUT_OF_BOUND","","Index is out of bound",1,null],[13,"FANN_E_SCALE_NOT_PRESENT","","Scaling parameters not present",1,null],[4,"fann_train_enum","","The Training algorithms used when training on `fann_train_data` with functions like\n`fann_train_on_data` or `fann_train_on_file`. The incremental training alters the weights\nafter each time it is presented an input pattern, while batch only alters the weights once after\nit has been presented to all the patterns.",null,null],[13,"FANN_TRAIN_INCREMENTAL","","Standard backpropagation algorithm, where the weights are\nupdated after each training pattern. This means that the weights are updated many\ntimes during a single epoch. For this reason some problems will train very fast with\nthis algorithm, while other more advanced problems will not train very well.",2,null],[13,"FANN_TRAIN_BATCH","","Standard backpropagation algorithm, where the weights are updated after calculating the mean\nsquare error for the whole training set. This means that the weights are only updated once\nduring an epoch. For this reason some problems will train slower with this algorithm. But\nsince the mean square error is calculated more correctly than in incremental training, some\nproblems will reach better solutions with this algorithm.",2,null],[13,"FANN_TRAIN_RPROP","","A more advanced batch training algorithm which achieves good results\nfor many problems. The RPROP training algorithm is adaptive, and does therefore not\nuse the `learning_rate`. Some other parameters can however be set to change the way the\nRPROP algorithm works, but it is only recommended for users with insight in how the RPROP\ntraining algorithm works. The RPROP training algorithm is described by\n[Riedmiller and Braun, 1993], but the actual learning algorithm used here is the\niRPROP- training algorithm which is described by [Igel and Husken, 2000] which\nis a variant of the standard RPROP training algorithm.",2,null],[13,"FANN_TRAIN_QUICKPROP","","A more advanced batch training algorithm which achieves good results\nfor many problems. The quickprop training algorithm uses the `learning_rate` parameter\nalong with other more advanced parameters, but it is only recommended to change these\nadvanced parameters for users with insight in how the quickprop training algorithm works.\nThe quickprop training algorithm is described by [Fahlman, 1988].",2,null],[4,"fann_activationfunc_enum","","The activation functions used for the neurons during training. The activation functions\ncan either be defined for a group of neurons by `fann_set_activation_function_hidden` and\n`fann_set_activation_function_output`, or it can be defined for a single neuron by\n`fann_set_activation_function`.",null,null],[13,"FANN_NONE","","Neuron does not exist or does not have an activation function.",3,null],[13,"FANN_LINEAR","","Linear activation function.",3,null],[13,"FANN_THRESHOLD","","Threshold activation function.",3,null],[13,"FANN_THRESHOLD_SYMMETRIC","","Threshold activation function.",3,null],[13,"FANN_SIGMOID","","Sigmoid activation function.",3,null],[13,"FANN_SIGMOID_STEPWISE","","Stepwise linear approximation to sigmoid.",3,null],[13,"FANN_SIGMOID_SYMMETRIC","","Symmetric sigmoid activation function, aka. tanh.",3,null],[13,"FANN_SIGMOID_SYMMETRIC_STEPWISE","","Stepwise linear approximation to symmetric sigmoid.",3,null],[13,"FANN_GAUSSIAN","","Gaussian activation function.",3,null],[13,"FANN_GAUSSIAN_SYMMETRIC","","Symmetric gaussian activation function.",3,null],[13,"FANN_GAUSSIAN_STEPWISE","","Stepwise linear approximation to gaussian.\nFaster than gaussian but a bit less precise.\nNOT implemented yet.",3,null],[13,"FANN_ELLIOTT","","Fast (sigmoid like) activation function defined by David Elliott",3,null],[13,"FANN_ELLIOTT_SYMMETRIC","","Fast (symmetric sigmoid like) activation function defined by David Elliott",3,null],[13,"FANN_LINEAR_PIECE","","Bounded linear activation function.",3,null],[13,"FANN_LINEAR_PIECE_SYMMETRIC","","Bounded linear activation function.",3,null],[13,"FANN_SIN_SYMMETRIC","","Periodical sine activation function.",3,null],[13,"FANN_COS_SYMMETRIC","","Periodical cosine activation function.",3,null],[13,"FANN_SIN","","Periodical sine activation function.",3,null],[13,"FANN_COS","","Periodical cosine activation function.",3,null],[4,"fann_errorfunc_enum","","Error function used during training.",null,null],[13,"FANN_ERRORFUNC_LINEAR","","Standard linear error function.",4,null],[13,"FANN_ERRORFUNC_TANH","","Tanh error function, usually better but can require a lower learning rate. This error\nfunction aggressively targets outputs that differ much from the desired, while not targeting\noutputs that only differ a little that much. This activation function is not recommended for\ncascade training and incremental training.",4,null],[4,"fann_stopfunc_enum","","Stop criteria used during training.",null,null],[13,"FANN_STOPFUNC_MSE","","Stop criterion is Mean Square Error (MSE) value.",5,null],[13,"FANN_STOPFUNC_BIT","","Stop criterion is number of bits that fail. The number of bits means the\nnumber of output neurons which differ more than the bit fail limit\n(see `fann_get_bit_fail_limit`, `fann_set_bit_fail_limit`).\nThe bits are counted in all of the training data, so this number can be higher than\nthe number of training data.",5,null],[4,"fann_nettype_enum","","Definition of network types used by `fann_get_network_type`.",null,null],[13,"FANN_NETTYPE_LAYER","","Each layer only has connections to the next layer.",6,null],[13,"FANN_NETTYPE_SHORTCUT","","Each layer has connections to all following layers.",6,null],[7,"fann_default_error_log","","",null,null],[5,"fann_set_error_log","","Change where errors are logged to. Both `fann` and `fann_data` can be\ncast to `fann_error`, so this function can be used to set either of these.",null,null],[5,"fann_get_errno","","Returns the last error number.",null,null],[5,"fann_reset_errno","","Resets the last error number.",null,null],[5,"fann_reset_errstr","","Resets the last error string.",null,null],[5,"fann_get_errstr","","Returns the last error string.",null,null],[5,"fann_print_error","","Prints the last error to `stderr`.",null,null],[5,"fann_train","","Train one iteration with a set of inputs, and a set of desired outputs.\nThis training is always incremental training (see `fann_train_enum`), since\nonly one pattern is presented.",null,null],[5,"fann_test","","Test with a set of inputs, and a set of desired outputs.\nThis operation updates the mean square error, but does not\nchange the network in any way.",null,null],[5,"fann_get_MSE","","Reads the mean square error from the network.",null,null],[5,"fann_get_bit_fail","","The number of fail bits; means the number of output neurons which differ more\nthan the bit fail limit (see `fann_get_bit_fail_limit`, `fann_set_bit_fail_limit`).\nThe bits are counted in all of the training data, so this number can be higher than\nthe number of training data.",null,null],[5,"fann_reset_MSE","","Resets the mean square error from the network.",null,null],[5,"fann_train_on_data","","Trains on an entire dataset, for a period of time.",null,null],[5,"fann_train_on_file","","Does the same as `fann_train_on_data`, but reads the training data directly from a file.",null,null],[5,"fann_train_epoch","","Train one epoch with a set of training data.",null,null],[5,"fann_test_data","","Tests a set of training data and calculates the MSE for the training data.",null,null],[5,"fann_read_train_from_file","","Reads a file that stores training data.",null,null],[5,"fann_create_train_from_callback","","Creates the training data struct from a user supplied function.\n As the training data are numerable (data 1, data 2...), the user must write\n a function that receives the number of the training data set (input,output)\n and returns the set.",null,null],[5,"fann_destroy_train","","Destructs the training data and properly deallocates all of the associated data.\nBe sure to call this function when finished using the training data.",null,null],[5,"fann_shuffle_train_data","","Shuffles training data, randomizing the order.\nThis is recommended for incremental training, while it has no influence during batch\ntraining.",null,null],[5,"fann_scale_train","","Scale input and output data based on previously calculated parameters.",null,null],[5,"fann_descale_train","","Descale input and output data based on previously calculated parameters.",null,null],[5,"fann_set_input_scaling_params","","Calculate input scaling parameters for future use based on training data.",null,null],[5,"fann_set_output_scaling_params","","Calculate output scaling parameters for future use based on training data.",null,null],[5,"fann_set_scaling_params","","Calculate input and output scaling parameters for future use based on training data.",null,null],[5,"fann_clear_scaling_params","","Clears scaling parameters.",null,null],[5,"fann_scale_input","","Scale data in input vector before feeding it to the ANN based on previously calculated\nparameters.",null,null],[5,"fann_scale_output","","Scale data in output vector before feeding it to the ANN based on previously calculated\nparameters.",null,null],[5,"fann_descale_input","","Scale data in input vector after getting it from the ANN based on previously calculated\nparameters.",null,null],[5,"fann_descale_output","","Scale data in output vector after getting it from the ANN based on previously calculated\nparameters.",null,null],[5,"fann_scale_input_train_data","","Scales the inputs in the training data to the specified range.",null,null],[5,"fann_scale_output_train_data","","Scales the outputs in the training data to the specified range.",null,null],[5,"fann_scale_train_data","","Scales the inputs and outputs in the training data to the specified range.",null,null],[5,"fann_merge_train_data","","Merges the data from `data1` and `data2` into a new `fann_train_data`.",null,null],[5,"fann_duplicate_train_data","","Returns an exact copy of a `fann_train_data`.",null,null],[5,"fann_subset_train_data","","Returns an copy of a subset of the `fann_train_data`, starting at position `pos`\nand `length` elements forward.",null,null],[5,"fann_length_train_data","","Returns the number of training patterns in the `fann_train_data`.",null,null],[5,"fann_num_input_train_data","","Returns the number of inputs in each of the training patterns in the `fann_train_data`.",null,null],[5,"fann_num_output_train_data","","Returns the number of outputs in each of the training patterns in the `fann_train_data`.",null,null],[5,"fann_save_train","","Save the training structure to a file, with the format specified in\n`fann_read_train_from_file`",null,null],[5,"fann_save_train_to_fixed","","Saves the training structure to a fixed point data file.",null,null],[5,"fann_get_training_algorithm","","Return the training algorithm as described by `fann_train_enum`. This training algorithm\nis used by `fann_train_on_data` and associated functions.",null,null],[5,"fann_set_training_algorithm","","Set the training algorithm.",null,null],[5,"fann_get_learning_rate","","Return the learning rate.",null,null],[5,"fann_set_learning_rate","","Set the learning rate.",null,null],[5,"fann_get_learning_momentum","","Get the learning momentum.",null,null],[5,"fann_set_learning_momentum","","Set the learning momentum.",null,null],[5,"fann_get_activation_function","","Get the activation function for neuron number `neuron` in layer number `layer`,\ncounting the input layer as layer 0.",null,null],[5,"fann_set_activation_function","","Set the activation function for neuron number `neuron` in layer number `layer`,\ncounting the input layer as layer 0.",null,null],[5,"fann_set_activation_function_layer","","Set the activation function for all the neurons in the layer number `layer`,\ncounting the input layer as layer 0.",null,null],[5,"fann_set_activation_function_hidden","","Set the activation function for all of the hidden layers.",null,null],[5,"fann_set_activation_function_output","","Set the activation function for the output layer.",null,null],[5,"fann_get_activation_steepness","","Get the activation steepness for neuron number `neuron` in layer number `layer`,\ncounting the input layer as layer 0.",null,null],[5,"fann_set_activation_steepness","","Set the activation steepness for neuron number `neuron` in layer number `layer`,\ncounting the input layer as layer 0.",null,null],[5,"fann_set_activation_steepness_layer","","Set the activation steepness for all neurons in layer number `layer`,\ncounting the input layer as layer 0.",null,null],[5,"fann_set_activation_steepness_hidden","","Set the steepness of the activation steepness in all of the hidden layers.",null,null],[5,"fann_set_activation_steepness_output","","Set the steepness of the activation steepness in the output layer.",null,null],[5,"fann_get_train_error_function","","Returns the error function used during training.",null,null],[5,"fann_set_train_error_function","","Set the error function used during training.",null,null],[5,"fann_get_train_stop_function","","Returns the the stop function used during training.",null,null],[5,"fann_set_train_stop_function","","Set the stop function used during training.",null,null],[5,"fann_get_bit_fail_limit","","Returns the bit fail limit used during training.",null,null],[5,"fann_set_bit_fail_limit","","Set the bit fail limit used during training.",null,null],[5,"fann_set_callback","","Sets the callback function for use during training.",null,null],[5,"fann_get_quickprop_decay","","The decay is a small negative valued number which is the factor that the weights\nshould become smaller in each iteration during quickprop training. This is used\nto make sure that the weights do not become too high during training.",null,null],[5,"fann_set_quickprop_decay","","Sets the quickprop decay factor.",null,null],[5,"fann_get_quickprop_mu","","The mu factor is used to increase and decrease the step size during quickprop training.\nThe mu factor should always be above 1, since it would otherwise decrease the step size\nwhen it was supposed to increase it.",null,null],[5,"fann_set_quickprop_mu","","Sets the quickprop mu factor.",null,null],[5,"fann_get_rprop_increase_factor","","The increase factor is a value larger than 1, which is used to\nincrease the step size during RPROP training.",null,null],[5,"fann_set_rprop_increase_factor","","The increase factor used during RPROP training.",null,null],[5,"fann_get_rprop_decrease_factor","","The decrease factor is a value smaller than 1, which is used to decrease the step size\nduring RPROP training.",null,null],[5,"fann_set_rprop_decrease_factor","","The decrease factor is a value smaller than 1, which is used to decrease the step size\nduring RPROP training.",null,null],[5,"fann_get_rprop_delta_min","","The minimum step size is a small positive number determining how small the minimum step size\nmay be.",null,null],[5,"fann_set_rprop_delta_min","","The minimum step size is a small positive number determining how small the minimum step size\nmay be.",null,null],[5,"fann_get_rprop_delta_max","","The maximum step size is a positive number determining how large the maximum step size may\nbe.",null,null],[5,"fann_set_rprop_delta_max","","The maximum step size is a positive number determining how large the maximum step size may\nbe.",null,null],[5,"fann_get_rprop_delta_zero","","The initial step size is a positive number determining the initial step size.",null,null],[5,"fann_set_rprop_delta_zero","","The initial step size is a positive number determining the initial step size.",null,null],[5,"fann_cascadetrain_on_data","","Trains on an entire dataset, for a period of time using the Cascade2 training algorithm.\nThis algorithm adds neurons to the neural network while training, which means that it\nneeds to start with an ANN without any hidden layers. The neural network should also use\nshortcut connections, so `fann_create_shortcut` should be used to create the ANN like this:",null,null],[5,"fann_cascadetrain_on_file","","Does the same as `fann_cascadetrain_on_data`, but reads the training data directly from a\nfile.",null,null],[5,"fann_get_cascade_output_change_fraction","","The cascade output change fraction is a number between 0 and 1 determining how large a\nfraction the `fann_get_MSE` value should change within\n`fann_get_cascade_output_stagnation_epochs` during training of the output connections, in\norder for the training not to stagnate. If the training stagnates, the training of the\noutput connections will be ended and new candidates will be prepared.",null,null],[5,"fann_set_cascade_output_change_fraction","","Sets the cascade output change fraction.",null,null],[5,"fann_get_cascade_output_stagnation_epochs","","The number of cascade output stagnation epochs determines the number of epochs training is\nallowed to continue without changing the MSE by a fraction of\n`fann_get_cascade_output_change_fraction`.",null,null],[5,"fann_set_cascade_output_stagnation_epochs","","Sets the number of cascade output stagnation epochs.",null,null],[5,"fann_get_cascade_candidate_change_fraction","","The cascade candidate change fraction is a number between 0 and 1 determining how large a\nfraction the `fann_get_MSE` value should change within\n`fann_get_cascade_candidate_stagnation_epochs` during training of the candidate neurons, in\norder for the training not to stagnate. If the training stagnates, the training of the\ncandidate neurons will be ended and the best candidate will be selected.",null,null],[5,"fann_set_cascade_candidate_change_fraction","","Sets the cascade candidate change fraction.",null,null],[5,"fann_get_cascade_candidate_stagnation_epochs","","The number of cascade candidate stagnation epochs determines the number of epochs training\nis allowed to continue without changing the MSE by a fraction of\n`fann_get_cascade_candidate_change_fraction`.",null,null],[5,"fann_set_cascade_candidate_stagnation_epochs","","Sets the number of cascade candidate stagnation epochs.",null,null],[5,"fann_get_cascade_weight_multiplier","","The weight multiplier is a parameter which is used to multiply the weights from the\ncandidate neuron before adding the neuron to the neural network. This parameter is usually\nbetween 0 and 1, and is used to make the training a bit less aggressive.",null,null],[5,"fann_set_cascade_weight_multiplier","","Sets the weight multiplier.",null,null],[5,"fann_get_cascade_candidate_limit","","The candidate limit is a limit for how much the candidate neuron may be trained.\nThe limit is a limit on the proportion between the MSE and candidate score.",null,null],[5,"fann_set_cascade_candidate_limit","","Sets the candidate limit.",null,null],[5,"fann_get_cascade_max_out_epochs","","The maximum out epochs determines the maximum number of epochs the output connections\nmay be trained after adding a new candidate neuron.",null,null],[5,"fann_set_cascade_max_out_epochs","","Sets the maximum out epochs.",null,null],[5,"fann_get_cascade_max_cand_epochs","","The maximum candidate epochs determines the maximum number of epochs the input\nconnections to the candidates may be trained before adding a new candidate neuron.",null,null],[5,"fann_set_cascade_max_cand_epochs","","Sets the max candidate epochs.",null,null],[5,"fann_get_cascade_num_candidates","","The number of candidates used during training (calculated by multiplying\n`fann_get_cascade_activation_functions_count`,\n`fann_get_cascade_activation_steepnesses_count` and\n`fann_get_cascade_num_candidate_groups`).",null,null],[5,"fann_get_cascade_activation_functions_count","","The number of activation functions in the `fann_get_cascade_activation_functions` array.",null,null],[5,"fann_get_cascade_activation_functions","","The cascade activation functions array is an array of the different activation functions\nused by the candidates.",null,null],[5,"fann_set_cascade_activation_functions","","Sets the array of cascade candidate activation functions. The array must be just as long\nas defined by the count.",null,null],[5,"fann_get_cascade_activation_steepnesses_count","","The number of activation steepnesses in the `fann_get_cascade_activation_functions` array.",null,null],[5,"fann_get_cascade_activation_steepnesses","","The cascade activation steepnesses array is an array of the different activation functions\nused by the candidates.",null,null],[5,"fann_set_cascade_activation_steepnesses","","Sets the array of cascade candidate activation steepnesses. The array must be just as long\nas defined by the count.",null,null],[5,"fann_get_cascade_num_candidate_groups","","The number of candidate groups is the number of groups of identical candidates which will be\nused during training.",null,null],[5,"fann_set_cascade_num_candidate_groups","","Sets the number of candidate groups.",null,null],[5,"fann_create_from_file","","Constructs a backpropagation neural network from a configuration file, which has been saved\nby `fann_save`.",null,null],[5,"fann_save","","Save the entire network to a configuration file.",null,null],[5,"fann_save_to_fixed","","Saves the entire network to a configuration file.\nBut it is saved in fixed point format no matter which\nformat it is currently in.",null,null],[5,"fann_create_standard","","Creates a standard fully connected backpropagation neural network.",null,null],[5,"fann_create_standard_array","","Just like `fann_create_standard`, but with an array of layer sizes\ninstead of individual parameters.",null,null],[5,"fann_create_sparse","","Creates a standard backpropagation neural network, which is not fully connected.",null,null],[5,"fann_create_sparse_array","","Just like `fann_create_sparse`, but with an array of layer sizes\ninstead of individual parameters.",null,null],[5,"fann_create_shortcut","","Creates a standard backpropagation neural network, which is not fully connected and which\nalso has shortcut connections.",null,null],[5,"fann_create_shortcut_array","","Just like `fann_create_shortcut`, but with an array of layer sizes\ninstead of individual parameters.",null,null],[5,"fann_destroy","","Destroys the entire network, properly freeing all the associated memory.",null,null],[5,"fann_run","","Runs input through the neural network, returning an array of outputs, the number of\nwhich being equal to the number of neurons in the output layer.",null,null],[5,"fann_randomize_weights","","Give each connection a random weight between `min_weight` and `max_weight`.",null,null],[5,"fann_init_weights","","Initialize the weights using Widrow + Nguyen's algorithm.",null,null],[5,"fann_print_connections","","Prints the connections of the ANN in a compact matrix, for easy viewing of the internals\nof the ANN.",null,null],[5,"fann_print_parameters","","Prints all of the parameters and options of the ANN.",null,null],[5,"fann_get_num_input","","Get the number of input neurons.",null,null],[5,"fann_get_num_output","","Get the number of output neurons.",null,null],[5,"fann_get_total_neurons","","Get the total number of neurons in the entire network. This number does also include the\nbias neurons, so a 2-4-2 network has 2+4+2 +2(bias) = 10 neurons.",null,null],[5,"fann_get_total_connections","","Get the total number of connections in the entire network.",null,null],[5,"fann_get_network_type","","Get the type of neural network it was created as.",null,null],[5,"fann_get_connection_rate","","Get the connection rate used when the network was created.",null,null],[5,"fann_get_num_layers","","Get the number of layers in the network.",null,null],[5,"fann_get_layer_array","","Get the number of neurons in each layer in the network.",null,null],[5,"fann_get_bias_array","","Get the number of bias in each layer in the network.",null,null],[5,"fann_get_connection_array","","Get the connections in the network.",null,null],[5,"fann_set_weight_array","","Set connections in the network.",null,null],[5,"fann_set_weight","","Set a connection in the network.",null,null],[5,"fann_set_user_data","","Store a pointer to user defined data. The pointer can be retrieved with `fann_get_user_data`\nfor example in a callback. It is the user's responsibility to allocate and deallocate any\ndata that the pointer might point to.",null,null],[5,"fann_get_user_data","","Get a pointer to user defined data that was previously set with `fann_set_user_data`. It is\nthe user's responsibility to allocate and deallocate any data that the pointer might point\nto.",null,null],[6,"fann_type_internal","","",null,null],[6,"fann_type","","The type of weights, inputs and outputs in a neural network. In the Rust bindings, it is\ndefined as `c_float` by default, and as `c_double`, if the `double` feature is configured.",null,null],[6,"fann_callback_type","","This callback function can be called during training when using `fann_train_on_data`,\n`fann_train_on_file` or `fann_cascadetrain_on_data`.",null,null],[11,"clone","","",1,{"inputs":[{"name":"fann_errno_enum"}],"output":{"name":"fann_errno_enum"}}],[11,"clone","","",2,{"inputs":[{"name":"fann_train_enum"}],"output":{"name":"fann_train_enum"}}],[11,"clone","","",3,{"inputs":[{"name":"fann_activationfunc_enum"}],"output":{"name":"fann_activationfunc_enum"}}],[11,"clone","","",4,{"inputs":[{"name":"fann_errorfunc_enum"}],"output":{"name":"fann_errorfunc_enum"}}],[11,"clone","","",5,{"inputs":[{"name":"fann_stopfunc_enum"}],"output":{"name":"fann_stopfunc_enum"}}],[11,"clone","","",6,{"inputs":[{"name":"fann_nettype_enum"}],"output":{"name":"fann_nettype_enum"}}],[11,"eq","","",0,{"inputs":[{"name":"fann_connection"},{"name":"fann_connection"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"fann_connection"},{"name":"fann_connection"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"fann_connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"fann_connection"}],"output":{"name":"fann_connection"}}]],"paths":[[3,"fann_connection"],[4,"fann_errno_enum"],[4,"fann_train_enum"],[4,"fann_activationfunc_enum"],[4,"fann_errorfunc_enum"],[4,"fann_stopfunc_enum"],[4,"fann_nettype_enum"]]};
initSearch(searchIndex);
